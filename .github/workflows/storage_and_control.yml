# This is a basic workflow to help you get started with Actions

name: go-services

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, refactoring-and-new-design ]
  pull_request:
    branches: [ main, refactoring-and-new-design ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      working-directory: ./storage_and_control
      registry: ghcr.io
      image_name: bchwtz-fhswf/gateway/db-dumper

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.1' # The Go version to download (if necessary) and use.
      - run: |
          mkdir build
          go build -o build/gw cmd/cli/main.go
          go build -o build/gw-dumper cmd/dumper/main.go
          GOOS=windows go build -o build/gw.exe cmd/cli/main.go
        working-directory: ${{ env.working-directory }}
      - uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.working-directory }}/build/*
      - uses: actions/upload-artifact@v3
        with:
          name: gw
          path: ${{ env.working-directory }}/build/gw
      - uses: actions/upload-artifact@v3
        with:
          name: gw.exe
          path: ${{ env.working-directory }}/build/gw.exe

  build-and-push-image:
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write

      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Log in to the Container registry
          uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
          with:
            registry: ${{ env.registry }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - uses: actions/download-artifact@v3
          with:
            name: build-artifacts

        - run: docker build -t ${{ env.registry }}/{{ env.image_name }}:latest -f {{ env.working-directory }}/docker/dumper/Dockerfile ./

        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
          with:
            images: ${{ env.registry }}/${{ env.image_name }}

        - name: Build and push Docker image
          uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
  # deploy:
  #   needs: build
  #   runs-on: deploy
  #   env:
  #     working-directory: ./deployments
  #     env-file: .env
  #     MF_AUTH_DB_PASS: ${{ secrets.MF_AUTH_DB_PASS }}
  #     MF_USERS_DB_PASS: ${{ secrets.MF_USERS_DB_PASS }}
  #     MF_USERS_ADMIN_PASSWORD: ${{ secrets.MF_USERS_ADMIN_PASSWORD }}
  #     MF_EMAIL_PASSWORD: ${{ secrets.MF_EMAIL_PASSWORD }}
  #     MF_THINGS_DB_PASS: ${{ secrets.MF_THINGS_DB_PASS }}
  #     MF_THINGS_ES_PASS: ${{ secrets.MF_THINGS_ES_PASS }}
  #     MF_MQTT_ADAPTER_ES_PASS: ${{ secrets.MF_MQTT_ADAPTER_ES_PASS }}
  #     MF_BOOTSTRAP_DB_PASS: ${{ secrets.MF_BOOTSTRAP_DB_PASS }}
  #     MF_PROVISION_PASS: ${{ secrets.MF_PROVISION_PASS }}
  #     MF_OPCUA_ADAPTER_ROUTE_MAP_PASS: ${{ secrets.MF_OPCUA_ADAPTER_ROUTE_MAP_PASS }}
  #     MF_INFLUX_WRITER_DB_PASS: ${{ secrets.MF_INFLUX_WRITER_DB_PASS }}
  #     MF_INFLUX_READER_DB_PASS: ${{ secrets.MF_INFLUX_READER_DB_PASS }}
  #     MF_TWINS_CACHE_PASS: ${{ secrets.MF_TWINS_CACHE_PASS }}

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: docker-pull
  #       run: /usr/local/bin/docker-compose pull
  #       working-directory: ${{env.working-directory}}

      
  #     - name: load-env
  #       run: |
  #         while read line; do
  #           echo "$line" >> $GITHUB_ENV
  #         done < ${{ env.env-file }}
  #       working-directory: ${{env.working-directory}}
  #     - name: docker up
  #       working-directory: ${{env.working-directory}}
  #       run: /usr/local/bin/docker-compose up -d